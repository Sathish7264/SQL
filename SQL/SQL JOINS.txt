JOINS
mysql> USE CLASS;
Database changed
mysql> SELECT * FROM CUSTOMERS;
+----+---------+------+-----------+--------+
| ID | CUSNAME | AGE  | ADDRESS   | SALARY |
+----+---------+------+-----------+--------+
|  1 | RAMESH  |   32 | HYDERABAD |   2000 |
|  2 | RAJESH  |   23 | DELHI     |   1500 |
|  3 | PRIYA   |   25 | MUMBAI    |   2000 |
|  4 | PAVANI  |   24 | GUJARATH  |   6500 |
|  5 | SATHISH |   24 | GOA       |   7000 |
|  6 | AKHIL   |   30 | GOA       |   4500 |
|  7 | YOGA    |   24 | DELHI     |   1000 |
|  8 | SURYA   |   23 | HYDERABAD |   1000 |
+----+---------+------+-----------+--------+
8 rows in set (0.00 sec)

mysql> SELECT * FROM ORDERS;
+-----+------------+------------+--------+
| ID  | DATE       | CUSTOMERID | AMOUNT |
+-----+------------+------------+--------+
| 100 | 2009-10-08 |          3 |   1500 |
| 101 | 2009-10-08 |          3 |   3000 |
| 102 | 2009-10-08 |          2 |   1560 |
| 103 | 2009-11-20 |          4 |   2060 |
+-----+------------+------------+--------+
4 rows in set (0.00 sec)
> ALTER TABLE ORDERS RENAME COLUMN ID TO OID;
Query OK, 0 rows affected (0.07 sec)
Records: 0  Duplicates: 0  Warnings: 0
 SELECT ID, CUSNAME, AGE, AMOUNT
    -> FROM CUSTOMERS, ORDERS
    -> WHERE CUSTOMERS.ID = ORDERS.CUSTOMERID;
+----+---------+------+--------+
| ID | CUSNAME | AGE  | AMOUNT |
+----+---------+------+--------+
|  3 | PRIYA   |   25 |   1500 |
|  3 | PRIYA   |   25 |   3000 |
|  2 | RAJESH  |   23 |   1560 |
|  4 | PAVANI  |   24 |   2060 |
+----+---------+------+--------+
4 rows in set (0.00 sec)

INNER JOIN: returns rows when there is a match in both tables. 

LEFT JOIN: returns all rows from the left table, even if there are no matches in the right table. 

RIGHT JOIN: returns all rows from the right table, even if there are no matches in the left table. 

FULL JOIN: returns rows when there is a match in one of the tables. 

SELF JOIN: is used to join a table to itself as if the table were two tables, temporarily renaming at least one table in the SQL statement.

CARTESIAN JOIN: returns the Cartesian product of the sets of records from the two or more joined tables.

------------------------------------------------------------------------------------------------
INNER JOIN 
The most frequently used and important of the joins is the INNER JOIN. They are also referred to as an 
EQUIJOIN. 
The INNER JOIN creates a new result table by combining column values of two tables (table1 and table2) based 
upon the join-predicate. The query compares each row of table1 with each row of table2 to find all pairs of rows 
which satisfy the join-predicate. When the join-predicate is satisfied, column values for each matched pair of rows 
of A and B are combined into a result row. 

Syntax: 
The basic syntax of INNER JOIN is as follows:

SELECT table1.column1, table2.column2... 
FROM table1 
INNER JOIN table2 
ON table1.common_filed = table2.common_field;

Now, let us join these two tables using INNER JOIN as follows:

mysql> SELECT ID, NAME, AMOUNT, DATE
    -> FROM CUSTOMERS
    -> INNER JOIN ORDERS
    -> ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;
+----+--------+--------+------------+
| ID | NAME   | AMOUNT | DATE       |
+----+--------+--------+------------+
|  3 | PRIYA  |   1500 | 2009-10-08 |
|  3 | PRIYA  |   3000 | 2009-10-08 |
|  2 | RAJESH |   1560 | 2009-10-08 |
|  4 | PAVANI |   2060 | 2009-11-20 |
+----+--------+--------+------------+
4 rows in set (0.00 sec)
-------------------------------------------------------------------------------------------
LEFT JOIN 
The SQL LEFT JOIN returns all rows from the left table, even if there are no matches in the right table. This means 
that if the ON clause matches 0 (zero) records in right table, the join will still return a row in the result, but with 
NULL in each column from right table. 
This means that a left join returns all the values from the left table, plus matched values from the right table or 
NULL in case of no matching join predicate. 

Syntax: 
The basic syntax of LEFT JOIN is as follows: 

SELECT table1.column1, table2.column2... 
FROM table1 
INNER JOIN table2 
ON table1.common_filed = table2.common_field;

Now, let us join these two tables using INNER JOIN as follows:

 SELECT ID, NAME, AMOUNT, DATE
    -> FROM CUSTOMERS
    -> INNER JOIN ORDERS
    -> ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;
+----+--------+--------+------------+
| ID | NAME   | AMOUNT | DATE       |
+----+--------+--------+------------+
|  3 | PRIYA  |   1500 | 2009-10-08 |
|  3 | PRIYA  |   3000 | 2009-10-08 |
|  2 | RAJESH |   1560 | 2009-10-08 |
|  4 | PAVANI |   2060 | 2009-11-20 |
+----+--------+--------+------------+
4 rows in set (0.00 sec)
----------------------------------------------------------------------------
LEFT JOIN 
The SQL LEFT JOIN returns all rows from the left table, even if there are no matches in the right table. This means 
that if the ON clause matches 0 (zero) records in right table, the join will still return a row in the result, but with 
NULL in each column from right table. 
This means that a left join returns all the values from the left table, plus matched values from the right table or 
NULL in case of no matching join predicate. 

Syntax: 
The basic syntax of LEFT JOIN is as follows: 

SELECT table1.column1, table2.column2... 
FROM table1 
LEFT JOIN table2 
ON table1.common_filed = table2.common_field;

Now, let us join these two tables using LEFT JOIN as follows:


mysql> SELECT ID, NAME, AMOUNT, DATE
    -> FROM CUSTOMERS
    -> LEFT JOIN ORDERS
    -> ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;
+----+---------+--------+------------+
| ID | NAME    | AMOUNT | DATE       |
+----+---------+--------+------------+
|  1 | RAMESH  |   NULL | NULL       |
|  2 | RAJESH  |   1560 | 2009-10-08 |
|  3 | PRIYA   |   3000 | 2009-10-08 |
|  3 | PRIYA   |   1500 | 2009-10-08 |
|  4 | PAVANI  |   2060 | 2009-11-20 |
|  5 | SATHISH |   NULL | NULL       |
|  6 | AKHIL   |   NULL | NULL       |
|  7 | YOGA    |   NULL | NULL       |
|  8 | SURYA   |   NULL | NULL       |
+----+---------+--------+------------+
9 rows in set (0.01 sec)

------------------------------------------------------------------------------------
RIGHT JOIN 
The SQL RIGHT JOIN returns all rows from the right table, even if there are no matches in the left table. This 
means that if the ON clause matches 0 (zero) records in left table, the join will still return a row in the result, but 
with NULL in each column from left table. 
This means that a right join returns all the values from the right table, plus matched values from the left table or 
NULL in case of no matching join predicate. 

Syntax: 
The basic syntax of RIGHT JOIN is as follows:

SELECT table1.column1, table2.column2... 
FROM table1 
RIGHT JOIN table2 
ON table1.common_filed = table2.common_field;


mysql>  SELECT ID, NAME, AMOUNT, DATE
    -> FROM CUSTOMERS
    -> RIGHT JOIN ORDERS
    -> ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;
+------+--------+--------+------------+
| ID   | NAME   | AMOUNT | DATE       |
+------+--------+--------+------------+
|    3 | PRIYA  |   1500 | 2009-10-08 |
|    3 | PRIYA  |   3000 | 2009-10-08 |
|    2 | RAJESH |   1560 | 2009-10-08 |
|    4 | PAVANI |   2060 | 2009-11-20 |
+------+--------+--------+------------+
4 rows in set (0.00 sec)

--------------------------------------------------------------------------------------------

FULL JOIN 
The SQL FULL JOIN combines the results of both left and right outer joins. 
The joined table will contain all records from both tables, and fill in NULLs for missing matches on either side. 

Syntax: 
The basic syntax of FULL JOIN is as follows: 

SELECT table1.column1, table2.column2... 
FROM table1 
FULL JOIN table2 
ON table1.common_filed = table2.common_field;

 SELECT ID, NAME, AMOUNT, DATE
    -> FROM CUSTOMERS
    -> FULL JOIN ORDERS
    -> ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;
ERROR 1054 (42S22): Unknown column 'CUSTOMERS.ID' in 'on clause'

If your Database does not support FULL JOIN like MySQL does not support FULL JOIN, then you can use UNION 
ALL clause to combine two JOINS as follows: 

mysql>  SELECT ID, NAME, AMOUNT, DATE
    -> FROM CUSTOMERS
    -> LEFT JOIN ORDERS
    -> ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID
    -> UNION ALL
    -> SELECT ID, NAME, AMOUNT, DATE
    -> FROM CUSTOMERS
    -> RIGHT JOIN ORDERS
    -> ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;
+------+---------+--------+------------+
| ID   | NAME    | AMOUNT | DATE       |
+------+---------+--------+------------+
|    1 | RAMESH  |   NULL | NULL       |
|    2 | RAJESH  |   1560 | 2009-10-08 |
|    3 | PRIYA   |   3000 | 2009-10-08 |
|    3 | PRIYA   |   1500 | 2009-10-08 |
|    4 | PAVANI  |   2060 | 2009-11-20 |
|    5 | SATHISH |   NULL | NULL       |
|    6 | AKHIL   |   NULL | NULL       |
|    7 | YOGA    |   NULL | NULL       |
|    8 | SURYA   |   NULL | NULL       |
|    3 | PRIYA   |   1500 | 2009-10-08 |
|    3 | PRIYA   |   3000 | 2009-10-08 |
|    2 | RAJESH  |   1560 | 2009-10-08 |
|    4 | PAVANI  |   2060 | 2009-11-20 |
+------+---------+--------+------------+
13 rows in set (0.01 sec)

-----------------------------------------------------------------------------------------------

SELF JOIN 
The SQL SELF JOIN is used to join a table to itself as if the table were two tables, temporarily renaming at least 
one table in the SQL statement.
 
Syntax: 
The basic syntax of SELF JOIN is as follows: 

SELECT a.column_name, b.column_name... 
FROM table1 a, table1 b 
WHERE a.common_filed = b.common_field;

 SELECT a.ID, b.NAME, a.SALARY
    -> FROM CUSTOMERS a, CUSTOMERS b
    -> WHERE a.SALARY < b.SALARY;
+----+---------+--------+
| ID | NAME    | SALARY |
+----+---------+--------+
|  8 | RAMESH  |   1000 |
|  7 | RAMESH  |   1000 |
|  2 | RAMESH  |   1500 |
|  8 | RAJESH  |   1000 |
|  7 | RAJESH  |   1000 |
|  8 | PRIYA   |   1000 |
|  7 | PRIYA   |   1000 |
|  2 | PRIYA   |   1500 |
|  8 | PAVANI  |   1000 |
|  7 | PAVANI  |   1000 |
|  6 | PAVANI  |   4500 |
|  3 | PAVANI  |   2000 |
|  2 | PAVANI  |   1500 |
|  1 | PAVANI  |   2000 |
|  8 | SATHISH |   1000 |
|  7 | SATHISH |   1000 |
|  6 | SATHISH |   4500 |
|  4 | SATHISH |   6500 |
|  3 | SATHISH |   2000 |
|  2 | SATHISH |   1500 |
|  1 | SATHISH |   2000 |
|  8 | AKHIL   |   1000 |
|  7 | AKHIL   |   1000 |
|  3 | AKHIL   |   2000 |
|  2 | AKHIL   |   1500 |
|  1 | AKHIL   |   2000 |
+----+---------+--------+
26 rows in set (0.00 sec)

-------------------------------------------------------------------------------

CARTESIAN JOIN 
The CARTESIAN JOIN or CROSS JOIN returns the cartesian product of the sets of records from the two or more 
joined tables. Thus, it equates to an inner join where the join-condition always evaluates to True or where the joincondition is absent from the statement. 

Syntax: 
The basic syntax of INNER JOIN is as follows: 

SELECT table1.column1, table2.column2... 
FROM table1, table2 [, table3 ]


mysql> SELECT ID, NAME, AMOUNT, DATE
    -> FROM CUSTOMERS, ORDERS;
+----+---------+--------+------------+
| ID | NAME    | AMOUNT | DATE       |
+----+---------+--------+------------+
|  1 | RAMESH  |   2060 | 2009-11-20 |
|  1 | RAMESH  |   1560 | 2009-10-08 |
|  1 | RAMESH  |   3000 | 2009-10-08 |
|  1 | RAMESH  |   1500 | 2009-10-08 |
|  2 | RAJESH  |   2060 | 2009-11-20 |
|  2 | RAJESH  |   1560 | 2009-10-08 |
|  2 | RAJESH  |   3000 | 2009-10-08 |
|  2 | RAJESH  |   1500 | 2009-10-08 |
|  3 | PRIYA   |   2060 | 2009-11-20 |
|  3 | PRIYA   |   1560 | 2009-10-08 |
|  3 | PRIYA   |   3000 | 2009-10-08 |
|  3 | PRIYA   |   1500 | 2009-10-08 |
|  4 | PAVANI  |   2060 | 2009-11-20 |
|  4 | PAVANI  |   1560 | 2009-10-08 |
|  4 | PAVANI  |   3000 | 2009-10-08 |
|  4 | PAVANI  |   1500 | 2009-10-08 |
|  5 | SATHISH |   2060 | 2009-11-20 |
|  5 | SATHISH |   1560 | 2009-10-08 |
|  5 | SATHISH |   3000 | 2009-10-08 |
|  5 | SATHISH |   1500 | 2009-10-08 |
|  6 | AKHIL   |   2060 | 2009-11-20 |
|  6 | AKHIL   |   1560 | 2009-10-08 |
|  6 | AKHIL   |   3000 | 2009-10-08 |
|  6 | AKHIL   |   1500 | 2009-10-08 |
|  7 | YOGA    |   2060 | 2009-11-20 |
|  7 | YOGA    |   1560 | 2009-10-08 |
|  7 | YOGA    |   3000 | 2009-10-08 |
|  7 | YOGA    |   1500 | 2009-10-08 |
|  8 | SURYA   |   2060 | 2009-11-20 |
|  8 | SURYA   |   1560 | 2009-10-08 |
|  8 | SURYA   |   3000 | 2009-10-08 |
|  8 | SURYA   |   1500 | 2009-10-08 |
+----+---------+--------+------------+
32 rows in set (0.00 sec)

-------------------------------------------------------------------------------------------------





